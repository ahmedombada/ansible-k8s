- name: install Docker on Workers
  include_role:
    name: docker

- name: wait for docker
  wait_for:
    timeout: 30
  delegate_to: localhost

- name: install required packages
  apt:
    name: ['socat', 'conntrack', 'ipset', 'unzip', 'tar']

- name: check if swap is enabled
  shell: "swapon --show"
  register: result

- name: disable swap
  shell: "swapoff -a"
  when: result.stdout != ""

- name: create installation directories
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes
- name: download worker binaries
  get_url:
    url: "{{ item.src }}"
    dest: "{{ item.dest}}/{{ item.name }}"
    mode: 0755
  with_items:
    - { src: 'https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64', dest: /home/ahmed,  name: runc}
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kube-proxy', dest: /usr/local/bin, name: kube-proxy }
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kubectl', dest: /usr/local/bin, name: kubectl }
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kubelet', dest: /usr/local/bin, name: kubelet }

- name: create bridge template
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: 'kubelet-config.yaml.j2', dest: '/var/lib/kubelet/kubelet-config.yaml'}
    - { src: 'kube-proxy-config.yaml.j2', dest: '/var/lib/kube-proxy/kube-proxy-config.yaml'}
    - { src: 'kubelet.service.j2', dest: '/etc/systemd/system/kubelet.service'}

- name: copy certs to kublet dir
  copy:
    src: "/home/ahmed/{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: "{{inventory_hostname}}-key.pem", dest: "/var/lib/kubelet/"}
    - { src: "{{inventory_hostname}}.pem", dest: "/var/lib/kubelet/"}
    - { src: "ca.pem", dest: "/var/lib/kubernetes/"}
    - { src: "kube-proxy.kubeconfig", dest: "/var/lib/kube-proxy/kubeconfig"}
    - { src: "{{inventory_hostname}}.kubeconfig", dest: "/var/lib/kubelet/kubeconfig"}

- name: copy config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: "kube-proxy.service", dest: "/etc/systemd/system/kube-proxy.service"}

- name: allow pod communication
  ansible.builtin.iptables:
    chain: FORWARD
    source: "{{ vault_LAN }}"
    jump: ACCEPT

- name: start worker services
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items:
    - kubelet
    - kube-proxy